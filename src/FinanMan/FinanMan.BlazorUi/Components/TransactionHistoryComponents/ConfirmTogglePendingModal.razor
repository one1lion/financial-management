@typeparam T
@using FinanMan.Shared.DataEntryModels
@using FinanMan.Shared.General
@using Blazored.FluentValidation

<EditForm Model=Transaction OnValidSubmit="_ => TogglePending(true)">
    @* TODO: Use the FluentValidation validator, which involves feeding it the correct validator type based on the TransactionViewModel type *@
    <TemplatedModal @bind-Show=Show ShowDismiss=false>
        <ModalHeader>
            @if (IsCurrentlyPending)
            {
                <h3>@SharedLocalizerService.EnterPostedDateTitle</h3>
            }
            else
            {
                <h3>@SharedLocalizerService.ConfirmMarkPendingTitle</h3>
            }
        </ModalHeader>
        <ModalContent>
            @if (_currentResponse?.WasError ?? false)
            {
               @_currentResponse.RenderError
            }

            @if (IsCurrentlyPending)
            {
                <p>@SharedLocalizerService.CurrentRecordInformationText</p>
                <div class="form-group">
                    <label for="postedDate-@Transaction.TransactionId">@SharedLocalizerService.PostedDateLabel</label>
                    <input type="date" id="postedDate-@Transaction.TransactionId" @bind=_enteredPostedDate @ref=_postedDateInput />
                </div>
            }
            else
            {
                <p>@SharedLocalizerService.MarkPendingQuestion</p>
            }
            <ul>
                <li>
                    <text>@SharedLocalizerService.TransDateRowHeader</text>
                    <text>@Transaction.TransactionDate?.ToShortDateString()</text>
                </li>
                <li>
                    <text>@SharedLocalizerService.AccountNameRowHeader</text>
                    <text>@Transaction.AccountName</text>
                </li>
                <li>
                    <text>@SharedLocalizerService.PayeeRowHeader</text>
                    <text>@((MarkupString)PayeeValue)</text>
                </li>
                @if (!string.IsNullOrWhiteSpace(Transaction.Memo))
                {
                    <li>
                        <text>@SharedLocalizerService.MemoRowHeader</text>
                        <text>@Transaction.Memo</text>
                    </li>
                }
                <li>
                    <text>@SharedLocalizerService.TotalRowHeader</text>
                    <text>@Transaction.Total</text>
                </li>
            </ul>
        </ModalContent>
        <ModalFooter>
            <button type="button" class="btn btn-primary" @onclick="_ => TogglePending(true)">
                @if (IsCurrentlyPending)
                {
                    <text>@SharedLocalizerService.Ok</text>
                }
                else
                {
                    <text>@SharedLocalizerService.Remove</text>
                }
            </button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancelClicked">@SharedLocalizerService.Cancel</button>
        </ModalFooter>
    </TemplatedModal>
</EditForm>
